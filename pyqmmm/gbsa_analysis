from os import defpath
'''
See more here: https://github.com/davidkastner/quick-csa/blob/main/README.md
DESCRIPTION
    Generates GBSA data and processes and plots the output.
    Author: David Kastner
    Massachusetts Institute of Technology
    kastner (at) mit . edu
SEE ALSO
    gbsa_script.sh
'''
################################ DEPENDENCIES ##################################
import pandas as pd
import numpy as np
import time
import glob
################################## FUNCTIONS ###################################

'''
Extract the total decomposition energy from the DELTA section.
Returns
-------
df : pandas dataframe
    A Pandas dataframe containing only the delta G of binding energies
'''
def clean_raw_data():
    # List of file keywords from the GBSA output
    file_extenstion = './*24.dat'
    total_energy_keyword = 'T,o,t,a,l, ,E,n,e,r,g,y'
    sidechain_keyword = 'S,i,d,e,c,h,a,i,n'
    backbone_keyword = 'B,a,c,k,b,o,n,e'
    new_csv_file = './deltas.csv'

    # MMGBSA.py generates four files and we want the one that ends in 24.dat
    raw_file = glob.glob(file_extenstion, recursive=True)[0]
    delta_section = False
    # The raw file contains data we don't need; we only want the DELTA section
    with open(raw_file, 'r') as raw_data:
        for line in raw_data:
            # If we reach the DELTA section write the current line to a new file
            if delta_section == True:
                with open(new_csv_file, 'w') as csv_file:
                    # Stop at the end of the section
                    if sidechain_keyword in line or backbone_keyword in line:
                        break
                    # Save the data to a csv file for to open in pandas later
                    else:
                        csv_file.write(line)
            # Set a flag when we find the poorly named section generated by GBSA
            if line[:len(total_energy_keyword)] == total_energy_keyword:
                delta_section = True
    # Save the data to a Pandas dataframe and return the data
    df = pd.read_csv(new_csv_file)
    return df

# General function handler
def analyze_gbsa():
    print('\n.-------------------------.')
    print('| WELCOME TO GBSA ANALYSIS|')
    print('.-------------------------.\n')
    print('Did you remember to fill out the config file?')
    print('Will generate GBSA data if not there already')
    # Give the user time to read description
    # time.sleep(5)

    # Energy against a distance coordinate
    df = clean_raw_data()
    df

if __name__ == "__main__":
    analyze_gbsa()
