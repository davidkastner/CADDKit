import glob
import pandas as pd
import matplotlib.pyplot as plt

def update_res_names(df):
    # Dict containing MCPB residue names and their more convnetional pairs
    res_names = {'AG2':'ARG', 'AN1':'ASN', 'HIE':'HIS', 'TR1':'TYR', 'HD1':'HIS', 'HD2':'HIS', 'AP1':'ASP'}
    df = df.replace({'Resname 1':res_names})
    df = df.replace({'Resname 2':res_names})
    df['Resname 2'].replace(res_names)

    df.insert(4, 'Residue', df['Resname 2'] + df['Resid 2'].astype(str))
    return df

def get_gbsa_df(file):
    # List of file keywords from the GBSA output
    total_energy_keyword = 'D,E,L,T,A,S,:'
    sidechain_keyword = 'S,i,d,e,c,h,a,i,n, ,E,n,e,r,g,y, ,D,e,c,o,m,p,o,s,i,t,i,o,n,:'
    columns = ['Resname 1', 'Resid 1','Resname 2', 'Resid 2','Internal', 'Internal SD', 'Internal SDM', 'VDW', 'VDW SD', 'VDW SDM', 'Electrostatic', 'Electrostatic SD', 'Electrostatic SDM',
                  'Polar', 'Polar SD', 'Polar SDM', 'Non-polar', 'Non-polar SD', 'Non-polar SDM', 'Total', 'Total SD', 'Total SDM']
    csv_file_name = 'deltas.csv'

    # MMGBSA.py generates four files and we want the one that ends in 24.dat
    delta_section = False
    # The raw file contains data we don't need; we only want the DELTA section
    with open(file, 'r') as raw_data:
        with open(csv_file_name, 'w') as csv_file:
            for line in raw_data:
                # If we reach the DELTA section write the current line to a new file
                if delta_section == True:
                    if 'T,o,t,a,l' in line:
                        continue
                    if "Std" in line:
                        continue
                    if "Resid" in line:
                        csv_file.write(",".join(columns)) 
                        continue
                    # Stop at the end of the section
                    if sidechain_keyword in line:
                        break
                    # Save the data to a csv file for to open in pandas later
                    else:
                        line = '\n' + ','.join(line.split())
                        csv_file.write(line)

                # Set a flag when we find the poorly named section generated by GBSA
                if line[:len(total_energy_keyword)] == total_energy_keyword:
                    delta_section = True

    # Save the data to a Pandas dataframe and return the data
    df = pd.read_csv(csv_file_name)
    # Remove all rows where Resid 1 and Resid 2 are the same number
    df = df[df['Resid 1'] != df['Resid 2']]

    # Rewrite the csv file
    df.to_csv('deltas.csv')

    return df

def get_top_hits_df(df):
    # Ask the user how many of the top hits they would like to see
    hit_num = int(input('Show me the top n residues: '))
    # Get the top largest contributors to ligand interaction energies
    df_hits = df[df['Resid 1'] == 286].nsmallest(hit_num, 'Total', keep='all')

    return  df_hits

def plot_single_total_gbsa(df):
    df.plot.bar(x='Residue', y='Total')

def plot_single_all_gbsa(df):
    df.plot.bar(x='Residue', y=['VDW','Electrostatic','Polar','Non-polar','Total'])

def gbsa():
    file_extenstion = '*24.dat'
    # Loop through all the GBSA data located in the current directory
    raw_files = glob.glob(file_extenstion, recursive=True)[0]
    for file in raw_files:
        df = get_gbsa_df(file)
        df = update_res_names(df)
        df_hits = get_top_hits_df(df)

    # Generate a plots
    plot_single_total_gbsa(df_hits)
    plot_single_all_gbsa(df_hits)

if __name__ == "__main__":
    gbsa()
